<template>
  <div>
    <Bar :data="chartData"></Bar>
  </div>
</template>

<script>
import { ref, watchEffect } from 'vue';
import { useQuery } from 'vue-query';
import { Bar } from 'vue-chartjs'; // Import Bar from vue-chartjs
import { Chart as ChartJS,ArcElement, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';
ChartJS.register(ArcElement, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);
import { usePaymentStore } from "src/stores/payments-store";

const paymentStore = usePaymentStore();

export default {
  extends: Bar, // Extend Bar instead of Line
  components: { Bar},
  props: {
    initialData: {
      type: Object,
      default: null,
    },
  },
  setup(props) {
    const chartData = ref({
      labels: [],
      datasets: [{
        label: 'Amount',
        backgroundColor: 'blue',
        data: []
      }]
    });

    // Fetch data using Vue Query
    useQuery('chartData', async () => {
      const data = await paymentStore.fetchPayments(0); // Call the fetch function from paymentstore.js
    
        chartData.value.labels = data.labels;
        chartData.value.datasets[0].data = data.__v_raw[0].amount; // Assuming your data structure has values array
        console.log("hey", data.__v_raw[0].amount);
        console.log("hey", chartData.value.datasets[0].data);
        return { chartData };

    
    }, {
      refetchInterval: 10000, // Example: refetch data every 10 seconds
    });
    console.log("hey", chartData.value.datasets[0].data);
    watchEffect(chartData, (newValue, oldValue) => {
    console.log('Updated chartData:', newValue);
    
  });
    // Render the chart when data changes
    return { console.log("j",chartData) };
  },
  
};
</script>
